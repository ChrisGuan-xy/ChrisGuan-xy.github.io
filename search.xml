<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>label标签的作用</title>
      <link href="2021/112318849.html"/>
      <url>2021/112318849.html</url>
      
        <content type="html"><![CDATA[<h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>label 标签为 input 元素定义标注（标记）。</p><p>label 元素不会向用户呈现任何特殊效果。不过，它为鼠标用户改进了可用性。如果您在 label 元素内点击文本，就会触发此控件。就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。</p><p>label 标签的 for 属性应当与相关元素的 id 属性相同。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>football<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>football<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ball<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>football<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basketball<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>basketball<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ball<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basketball<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>点击相关的文本标记，就可以触发相关控件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>iframe的优缺点</title>
      <link href="2021/112338292.html"/>
      <url>2021/112338292.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、使用-iframe-的优缺点"><a href="#一、使用-iframe-的优缺点" class="headerlink" title="一、使用 iframe 的优缺点"></a>一、使用 iframe 的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1.iframe 可以把嵌入的网页原样显示出来</p><p>2.模块分离，便于修改，如果有多个页面引用 iframe，只需要修改 iframe 的内容，就可以实现调用的每一个页面内容的修改，简单快捷。</p><p>3.网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用 iframe 来嵌套，增加代码的可重用性。</p><p>4.可以用 iframe 来呈现一些加载比较慢的第三方内容，比如图标或者广告。</p><p>5.重载页面时不需要重载整个页面，只需要重载页面中的一个框架页。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>1.样式和脚本需要额外链入，调用外部页面，需要额外调用 css，增加页面额外的请求次数，增加服务器的 http 请求。</p><p>2.代码复杂，在网页中使用框架结构最大的弊病是搜索引擎的“蜘蛛”程序无法解读这种页面，会影响搜索引擎优化，不利于网站排名。</p><p>3.框架结构有时会让人感到迷惑，滚动条除了会挤占有限的页面空间，还会使 iframe 布局混乱，并且有可能分散访问者的注意力，影响用户体验。</p><p>4.链接导航疑问，运用框架结构时，必须保证正确配置所有的导航链接，否则会给访问者带来很大的麻烦。比如被链接的页面出现在导航框架中，这种情况下访问者便会被陷住，此时没有其他地点可去。</p><p>5.产生多个页面，不易管理。</p><p>6.多数小型的移动设备无法完全显示框架，设备兼容性差。</p><h2 id="二、为什么尽量少用-iframe"><a href="#二、为什么尽量少用-iframe" class="headerlink" title="二、为什么尽量少用 iframe"></a>二、为什么尽量少用 iframe</h2><p>iframes 提供了一个简单的方式把一个网站的内容嵌入到另一个网站中。iframe 的创建比其它包括 scripts 和 css 的 DOM 元素的创建慢了 1-2 个数量级。</p><p>使用 iframe 的页面一般不会包含太多 iframe，所以创建 DOM 节点所花费的时间不会占很大的比重。但带来一些其它的问题：onload 事件以及连接池(connection pool)，即 iframe 会阻塞主页面的 Onload 事件及 iframe 和主页面共享连接池，会影响页面的并行加载。</p><p>1.iframes 阻塞页面加载，影响网页加载速度</p><p>及时触发 window 的 onload 事件是非常重要的。onload 事件触发使浏览器的 “忙” 指示器停止，告诉用户当前网页已经加载完毕。当 onload 事件加载延迟后，它给用户的感觉就是这个网页非常慢。</p><p>window 的 onload 事件需要在所有 iframe 加载完毕后(包含里面的元素)才会触发，就会影响网页加载速度。通过 JavaScript 动态设置 iframe 的 SRC 可以避免这种阻塞情况。</p><p>2.唯一的连接池</p><p>对每个 web 服务器来说，浏览器只打开极少的几个连接数。老的浏览器，包括 IE 6/7 和 Firefox 2，每个主机只有 2 个连接。在新的浏览器中，连接数增加鸟。Safari 3+和 Opera 9+增至 4 个，Chrome 1+、IE 8 及 Firefox 3 增至 6 个。</p><p>在大多数浏览器中，连接被主页面和它的 iframe 所共享，这意味着有可能 iframe 中的资源占用了可用连接而阻塞了主页面的资源加载。如果 iframe 中的内容同等重要，或比主页面更重要，这很好。然而在通常情况下 iframe 中的内容对页面来说不太重要，iframe 占用连接数是不可取的。一个解决方案是在优先级更高的资源下载完成后再动态的给 iframe 的 src 赋值。</p><p>总之，iframe 会给你的页面性能带来冲击，尽可能不使用 iframe，当确实需要时，谨慎地使用他们。目前框架的优点可以使用 Ajax 实现，这在某种角度也是一种替代方案。</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iframe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>img标签支持的图片格式</title>
      <link href="2021/081723507.html"/>
      <url>2021/081723507.html</url>
      
        <content type="html"><![CDATA[<p>img 标签支持多种图片格式，请参考如下表格：</p><table><thead><tr><th>缩写</th><th>图片格式</th><th>MIME 类型</th><th>文件拓展名</th><th>浏览器兼容性</th></tr></thead><tbody><tr><td>APNG</td><td>Animated Portable Network Graphics 动态便携式网络图像</td><td>image/apng</td><td>.apng</td><td>Chrome, Edge, Firefox, Opera, Safari</td></tr><tr><td>AVIF</td><td>AV1 Image File Format AV1 图像文件格式</td><td>image/avif</td><td>.avif</td><td>Chrome, Opera, Firefox (feature flag)</td></tr><tr><td>BMP</td><td>Bitmap file 位图文件</td><td>image/bmp</td><td>.bmp</td><td>Chrome, Edge, Firefox, Internet Explorer, Opera, Safari</td></tr><tr><td>GIF</td><td>Graphics Interchange Format 图像互换格式</td><td>image/gif</td><td>.gif</td><td>Chrome, Edge, Firefox, Internet Explorer, Opera, Safari</td></tr><tr><td>ICO</td><td>Microsoft Icon 微软图标</td><td>image/x-icon</td><td>.ico, .cur</td><td>Chrome, Edge, Firefox, Internet Explorer, Opera, Safari</td></tr><tr><td>JPEG</td><td>Joint Photographic Expert Group image 联合影像专家小组图像</td><td>image/jpeg</td><td>.jpg, .jpeg, .jfif, .pjpeg, .pjp</td><td>Chrome, Edge, Firefox, Internet Explorer, Opera, Safari</td></tr><tr><td>PNG</td><td>Portable Network Graphics 便携式网络图像</td><td>image/png</td><td>.png</td><td>Chrome, Edge, Firefox, Internet Explorer, Opera, Safari</td></tr><tr><td>SVG</td><td>Scalable Vector Graphics 可缩放矢量图形</td><td>image/svg+xml</td><td>.svg</td><td>Chrome, Edge, Firefox, Internet Explorer, Opera, Safari</td></tr><tr><td>TIFF</td><td>Tagged Image File Format 标签图像文件格式</td><td>image/tiff</td><td>.tif, .tiff</td><td>Safari</td></tr><tr><td>WebP</td><td>Web Picture format 万维网图像格式</td><td>image/webp</td><td>.webp</td><td>Chrome, Edge, Firefox, Opera, Safari</td></tr></tbody></table><p>我们要根据不同情况选择不同格式的图片</p><p><strong>照片：</strong><br>推荐 JPEG 或者 WebP。JPEG 更加兼容，WebP 可以提供更好的压缩效果。<br><strong>图标：</strong><br>推荐 SVG、无损 WebP 或者 PNG。<br><strong>截图：</strong><br>推荐无损 WebP 或者 PNG。<br><strong>图表、图纸等：</strong><br>推荐 SVG</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> img </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>strong和b标签的区别</title>
      <link href="2021/081522157.html"/>
      <url>2021/081522157.html</url>
      
        <content type="html"><![CDATA[<p>在做网站的建设的时候，经常会遇到 b 标签和 strong 标签，而这两种标签的作用都是对自己加粗，起到一个强调性的作用， b 标签和 strong 标签有何区别？对优化有哪些影响？</p><h2 id="1-b-标签和-strong-标签的区别"><a href="#1-b-标签和-strong-标签的区别" class="headerlink" title="1.b 标签和 strong 标签的区别"></a>1.b 标签和 strong 标签的区别</h2><p>b 标签和 strong 标签是两种不同的标签。</p><p>b 标签表示粗体。它由字母 b 表示。b 标签可以强调的是字体外观的加粗效果。例如：<b>I am bold.</b></p><p>但是，strong 标签是我们要强调的地方，这两个标签具有不同的含义。例如：<strong>强调字体</strong>。</p><p>两者是非常不同的。strong 标签具有语义并充当强调作用，而 b 标签没有，b 标签只是一个简单的粗体标签。</p><h2 id="2-b-标签和-strong-标签对-seo-的影响"><a href="#2-b-标签和-strong-标签对-seo-的影响" class="headerlink" title="2.b 标签和 strong 标签对 seo 的影响"></a>2.b 标签和 strong 标签对 seo 的影响</h2><p>b 标签之间的字符设置为粗体，strong 标签加字符的语义通过 strong 实现为粗体，搜索引擎更关注 strong 标签下的关键词。</p><p>strong 标签更加面向内容。在 HTML 中，关键词被标记。然而，在一些网站上，strong 标签也用于强调字体。但是，如果页面上有太多的 strong 标签，可能不利于排名。所以虽然 strong 标签更利于排名，但也需较少的使用。</p><h2 id="3-附加"><a href="#3-附加" class="headerlink" title="3.附加"></a>3.附加</h2><p>i 标签和 em 标签之间的关系，同 b 和 strong 标签差不多</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除浮动</title>
      <link href="2021/081459810.html"/>
      <url>2021/081459810.html</url>
      
        <content type="html"><![CDATA[<h2 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h2><ul><li>给父盒子设置高度</li><li>clear: both</li><li>通过伪元素清除</li><li>overflow: hidden</li></ul><h3 id="给父盒子设置高度"><a href="#给父盒子设置高度" class="headerlink" title="给父盒子设置高度"></a>给父盒子设置高度</h3><p>我们可以通过给父盒子设置一个固定的高度，来清除浮动，但是这种方法的缺陷很明显，会固定死父盒子的高度</p><h3 id="clear-both"><a href="#clear-both" class="headerlink" title="clear: both"></a>clear: both</h3><p>clear 有三个属性：left（当前元素左边不允许有浮动元素）、right（当前元素右边不允许有浮动元素）、both（当前元素的左右两边都不允许有浮动元素）</p><p>给浮动元素后边加一个空的 div，并且该 div 不浮动，然后设置 clear: both 属性</p><h3 id="通过伪元素清除"><a href="#通过伪元素清除" class="headerlink" title="通过伪元素清除"></a>通过伪元素清除</h3><p>给父盒子添加一个类名 clear-fix，该类名的属性如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.clear-fix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="overflow-hidden"><a href="#overflow-hidden" class="headerlink" title="overflow: hidden"></a>overflow: hidden</h3><p>overflow 属性是当内容溢出元素框时，设置的属性</p><p>属性值：</p><p>visible: 默认值，内容不会被盖掉，直接呈现在元素框之外<br>hidden: 超出元素框之外的内容会被隐藏，且不可见<br>scroll: 超出元素框之外的内容会被隐藏，但是可以通过滚动条查看<br>auto: 自适应，若超出元素框，则通过滚动条查看<br>inherit: 从父元素继承 overflow 属性的值</p>]]></content>
      
      
      <categories>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象的属性与方法</title>
      <link href="2021/072759325.html"/>
      <url>2021/072759325.html</url>
      
        <content type="html"><![CDATA[<h1 id="对象的属性与方法"><a href="#对象的属性与方法" class="headerlink" title="对象的属性与方法"></a>对象的属性与方法</h1><p>每个 Object 实例都有如下属性和方法:</p><ul><li>constructor：用于创建当前对象的函数。在前面的例子中，这个属性的值就是 Object() 函数。</li><li>hasOwnProperty(propertyName)：用于判断当前对象实例（不是原型）上是否存在给定的属性。要检查的属性名必须是字符串（如 o.hasOwnProperty(“name”)）或符号。</li><li>isPrototypeOf(object)：用于判断当前对象是否为另一个对象的原型。</li><li>propertyIsEnumerable(propertyName)：用于判断给定的属性是否可以使用 for-in 语句枚举。与 hasOwnProperty()一样，属性名必须是字符串。</li><li>toLocaleString()：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。</li><li>toString()：返回对象的字符串表示。</li><li>valueOf()：返回对象对应的字符串、数值或布尔值表示。通常与 toString()的返回值相同。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 烂笔头 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>禁止obj对象添加/删除元素</title>
      <link href="2021/071449298.html"/>
      <url>2021/071449298.html</url>
      
        <content type="html"><![CDATA[<h1 id="禁止-obj-对象添加-删除元素"><a href="#禁止-obj-对象添加-删除元素" class="headerlink" title="禁止 obj 对象添加/删除元素"></a>禁止 obj 对象添加/删除元素</h1><h2 id="一、defineProperty，defineProperties"><a href="#一、defineProperty，defineProperties" class="headerlink" title="一、defineProperty，defineProperties"></a>一、defineProperty，defineProperties</h2><p>当且仅当该属性的 configurable 键值为 true 时，该属性的描述符才能够被改变，同时该属性也可以从对应的对象上被删除。</p><p>所以，当 configurable 键值为 false 的时候，属性就无法从对象上删除。</p><p>局限性：此方法仅能使对象内的元素无法被删除，我们仍然可以在对象中添加新的对象</p><p>代码示例：</p><pre class=" language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"prop"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当且仅当该属性的 configurable 键值为 true 时，该属性的描述符才能够被改变，同时该属性也能从对应的对象上被删除。</span>  enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当且仅当该属性的 enumerable 键值为 true 时，该属性才会出现在对象的枚举属性中。</span>  writable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 表示是否可以修改属性的值。</span>  value<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这样设置之后，prop属性就变成了不能删除、不可重新修改特性、不可枚举、不能修改的属性值的属性。</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"Jackson"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  writable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Jackson</span><span class="token comment" spellcheck="true">// 修改</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"new name"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Jackson</span><span class="token comment" spellcheck="true">// 添加新属性</span>person<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">"beijing"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// beijing</span></code></pre><h2 id="二、Object-seal"><a href="#二、Object-seal" class="headerlink" title="二、Object.seal"></a>二、Object.seal</h2><p>Object.seal()方法可以封闭一个对象，阻止添加新属性并将其所有现有属性标记为不可配置。当前属性的值只要原来是可写的就可以改变。</p><p>一个对象是可扩展的(可添加新的属性)。密封一个对象就会让这个对象变得不能添加新属性，而且所有已有属性都会变得不可配置。属性不可配置的效果就是不可删除属性，但属性的值仍然可以修改。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"Jackson"</span><span class="token punctuation">,</span>  func<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* {    name:{        configurable: true        enumerable: true        value: "Jackson"        writable: true    }}*/</span>Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* {    name:{        configurable: false        enumerable: true        value: "Jackson"        writable: true    }}*/</span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>name<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Jackson</span><span class="token comment" spellcheck="true">// 尝试修改一个属性</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"James"</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// James 修改成功，密封操作只修改属性的可配置性，不影响可写性</span><span class="token comment" spellcheck="true">// 尝试修改一个方法</span>person<span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20 修改成功，密封操作只修改方法的可配置性，不影响可写性</span></code></pre><h2 id="三、Object-freeze"><a href="#三、Object-freeze" class="headerlink" title="三、Object.freeze"></a>三、Object.freeze</h2><p>Object.freeze() 方法可以冻结一个对象。冻结的对象再也不能被修改了，不能给这个对象添加新的属性，不能删除已有的属性，不能修改此对象已有属性的可写性、可配置性、可枚举性，不能修改已有属性的值。此外，冻结一个对象后，此对象的原型也不能被修改。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"xing"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  info<span class="token punctuation">:</span> <span class="token punctuation">{</span>    fav<span class="token punctuation">:</span> <span class="token string">"football"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> freezePerson <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>freezePerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hu ge"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>freezePerson<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// xing</span><span class="token comment" spellcheck="true">// 但是info 是没有被冻结的</span>freezePerson<span class="token punctuation">.</span>info<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">"beijing"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>freezePerson<span class="token punctuation">.</span>info<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// beijing</span></code></pre><!-- ## 四、ES6 中的 proxy 方法它在 API 使用者和对象之间扮演了一个中间人的角色。简而言之，我们可以使用 Proxy 来控制被访问的底层 target 对象的属性的行为。handler 对象可以用于配置 Proxy 的捕获器(trap) ，后者用于定义和限制访问底层对象的方式。```jsconst target = {  a: "我是不能删除的",  b: "我是不能修改的",  c: "也不能添加，我只有3个元素",};const lockTraget = new Proxy(target, {  set(target, property, value) {    console.log("拦截修改新增操作", target, property, value);    return false;  },  deleteProperty(target, property) {    console.log("拦截删除操作");    return false;  },  defineProperty(target, property, descriptor) {    console.log("defineProperty()");    return false;  },});lockTraget.newname = "FFFFF";console.log(lockTraget.newname); // undefineddelete lockTraget.a;console.log(lockTraget.a); // 删不掉 --><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue知识点汇总（持续更新中...）</title>
      <link href="2021/050845794.html"/>
      <url>2021/050845794.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-知识点汇总（持续更新中…）"><a href="#Vue-知识点汇总（持续更新中…）" class="headerlink" title="Vue 知识点汇总（持续更新中…）"></a>Vue 知识点汇总（持续更新中…）</h1><h2 id="一、重要知识点"><a href="#一、重要知识点" class="headerlink" title="一、重要知识点"></a>一、重要知识点</h2><h3 id="1-Vue-中-key-值的作用和工作原理"><a href="#1-Vue-中-key-值的作用和工作原理" class="headerlink" title="1.Vue 中 key 值的作用和工作原理"></a>1.Vue 中 key 值的作用和工作原理</h3><p><strong>key 值的作用：</strong></p><ul><li>1.主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes，相当于唯一标识 ID</li><li>2.Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染， 因此使用 key 值可以提高渲染效率，同理，改变某一元素的 key 值会使该元素重新被渲染。</li></ul><p><strong>key 的工作原理：</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 因为key值主要使用在虚拟DOM算法，即diff算法中。所以我们在src\core\vdom\patch.js文件中，从源码级别进行探讨</span><span class="token comment" spellcheck="true">// 先说这里的核心方法patch。这个方法在vue进行update，即将render函数(虚拟DOM生成的函数)转化为真实DOM的时候执行，里面主要首次渲染创建真实DOM树，进行虚拟DOM节点直接的对比，以及真实DOM的更新的一系列操作，并且会进行一系列判断和兼容处理，其中就有对key值的具体使用</span><span class="token comment" spellcheck="true">// 这个方法主要在patch方法中调用</span><span class="token comment" spellcheck="true">// 方法名很语义化 sameVnode === 相同虚拟DOM节点</span><span class="token keyword">function</span> <span class="token function">sameVnode</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 判断a, b两个Vnode上的key值是否相等</span>    a<span class="token punctuation">.</span>key <span class="token operator">===</span> b<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>tag <span class="token operator">===</span> b<span class="token punctuation">.</span>tag <span class="token operator">&amp;&amp;</span>      a<span class="token punctuation">.</span>isComment <span class="token operator">===</span> b<span class="token punctuation">.</span>isComment <span class="token operator">&amp;&amp;</span>      <span class="token function">isDef</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">isDef</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token function">sameInputType</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>      <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>isAsyncPlaceholder<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        a<span class="token punctuation">.</span>asyncFactory <span class="token operator">===</span> b<span class="token punctuation">.</span>asyncFactory <span class="token operator">&amp;&amp;</span>        <span class="token function">isUndef</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>asyncFactory<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在简单说下patchVnode方法的作用，这个方法会在patch方法里面调用，是直接对比新旧虚拟Vnode节点，也是diff算法真正执行的地方</span><span class="token comment" spellcheck="true">// 以下代码在patchVnode方法中</span><span class="token comment" spellcheck="true">// 在开始进行判断，符合条件的话就跳出方法，不再进行下面的diff对比</span><span class="token comment" spellcheck="true">// vnode.key === oldVnode.key判断双方是不是同一个组件</span><span class="token keyword">if</span> <span class="token punctuation">(</span>  <span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isStatic<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>  <span class="token function">isTrue</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>isStatic<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>  vnode<span class="token punctuation">.</span>key <span class="token operator">===</span> oldVnode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span>  <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isCloned<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isOnce<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  vnode<span class="token punctuation">.</span>componentInstance <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>componentInstance<span class="token punctuation">;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在例子中可以看出，对 Vnode 进行 patch 的时候会调用 sameVnode 方法，里面会使用 key 值是否相等来判断 Vnode 是否为同一个。并且在对比过程中作为组件复用的一个判断条件。<br>所以 key 值是在 DOM 树进行 diff 算法时候发挥作用。一个是用来判断新旧 Vnode 是否为同一个，从而进行下一步的比较以及渲染。另外一个作用就是判断组件是否可以复用，是否需要重新渲染。</p><h3 id="2-父子组件传参，调用方法"><a href="#2-父子组件传参，调用方法" class="headerlink" title="2.父子组件传参，调用方法"></a>2.父子组件传参，调用方法</h3><p>这部分的介绍在我另一篇文章中介绍了，具体请点击<a href="http://gxybee.cn/2021/042922513.html"> Vue 组件间通信》</a>查看</p><h3 id="3-Vue-等单页面应用及其优点"><a href="#3-Vue-等单页面应用及其优点" class="headerlink" title="3.Vue 等单页面应用及其优点"></a>3.Vue 等单页面应用及其优点</h3><p><strong>优点：</strong></p><ul><li>具有桌面应用的即时性、网站的可移植性和可访问性。</li><li>用户体验好、快，内容的改变不需要重新加载整个页面。</li><li>基于上面一点，SPA 相对对服务器压力小。</li><li>良好的前后端分离。SPA 和 RESTful 架构一起使用，后端不再负责模板渲染、输出页面工作，web 前端和各种移动终端地位对等，后端 API 通用化。</li><li>同一套后端程序代码，不用修改就可以用于 Web 界面、手机、平板等多种客户端；</li></ul><p><strong>缺点：</strong></p><ul><li>不利于 SEO。（如果你看中 SEO，那就不应该在页面上使用 JavaScript，你应该使用网站而不是 Web 应用）</li><li>初次加载耗时相对增多。</li><li>导航不可用，如果一定要导航需要自行实现前进、后退。</li></ul><h2 id="二、v-if、v-show-指令的共同点和不同点"><a href="#二、v-if、v-show-指令的共同点和不同点" class="headerlink" title="二、v-if、v-show 指令的共同点和不同点"></a>二、v-if、v-show 指令的共同点和不同点</h2><p><strong>共同点：</strong></p><p>都能控制元素的显示和隐藏</p><p><strong>不同点：</strong></p><p>实现的本质方法不同，v-show 是通过控制元素的样式属性，把 display 设置为 none，控制隐藏；v-if 是动态的向 DOM 树内添加或者删除 DOM 元素，若初始值为 false，就不会编译了，v-if 不停的销毁和创建必然消耗性能。</p><p><strong>总结：</strong></p><p>若要频繁切换节点，使用 v-show。若不需要频繁切换节点显示隐藏使用 v-if</p><h2 id="三、Vue-的生命周期"><a href="#三、Vue-的生命周期" class="headerlink" title="三、Vue 的生命周期"></a>三、Vue 的生命周期</h2><p><img src="/2021/050845794/lifeCycle.png" alt="生命周期"></p><table><thead><tr><th>序号</th><th>钩子函数</th><th>触发的行为</th><th>此阶段可以做什么</th></tr></thead><tbody><tr><td>1</td><td>beforeCreadted</td><td>vue 实例的挂载元素$el 和数据对象 data 都为 undefined，还未初始化。</td><td>加 loading 事件</td></tr><tr><td>2</td><td>created</td><td>vue 实例的数据对象 data 有了，$el 还没有</td><td>结束 loading、请求数据为 mounted 渲染做准备</td></tr><tr><td>3</td><td>beforeMount</td><td>vue 实例的$el 和 data 都初始化了，但还是虚拟的 dom 节点，具体的 data.filter 还未替换。</td><td>…</td></tr><tr><td>4</td><td>mounted</td><td>vue 实例挂载完成，data.filter 成功渲染</td><td>配合路由钩子使用</td></tr><tr><td>5</td><td>beforeUpdate</td><td>data 更新时触发</td><td>…</td></tr><tr><td>6</td><td>updated</td><td>data 更新时触发</td><td>数据更新时，做一些处理（此处也可以用 watch 进行观测）</td></tr><tr><td>7</td><td>beforeDestroy</td><td>组件销毁时触发</td><td>…</td></tr><tr><td>8</td><td>destroyed</td><td>组件销毁时触发，vue 实例解除了事件监听以及和 dom 的绑定（无响应了），但 DOM 节点依旧存在</td><td>组件销毁时进行提示</td></tr></tbody></table><h2 id="四、指令-v-el-的作用是什么？"><a href="#四、指令-v-el-的作用是什么？" class="headerlink" title="四、指令 v-el 的作用是什么？"></a>四、指令 v-el 的作用是什么？</h2><p>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标.可以是 CSS 选择器，也可以是一个 HTMLElement 实例。</p><h2 id="五、简述-Vuex-的原理和使用方法"><a href="#五、简述-Vuex-的原理和使用方法" class="headerlink" title="五、简述 Vuex 的原理和使用方法"></a>五、简述 Vuex 的原理和使用方法</h2><p><img src="/2021/050845794/Vuex.png" alt="Vuex"></p><p>数据单向流动</p><p>一个应用可以看作是由上面三部分组成: View, Actions,State,数据的流动也是从 View =&gt; Actions =&gt; State =&gt;View 以此达到数据的单向流动.</p><p>但是项目较大的, 组件嵌套过多的时候, 多组件共享同一个 State 会在数据传递时出现很多问题.Vuex 就是为了解决这些问题而产生的.</p><p>Vuex 可以被看作项目中所有组件的数据中心,我们将所有组件中共享的 State 抽离出来,任何组件都可以访问和操作我们的数据中心</p><p>Vuex 的组成：一个实例化的 Vuex.Store 由 state, mutations 和 actions 三个属性组成:</p><ul><li>state 中保存着共有数据</li><li>改变 state 中的数据有且只有通过 mutations 中的方法,且 mutations 中的方法必须是同步的</li><li>如果要写异步的方法,需要些在 actions 中, 并通过 commit 到 mutations 中进行 state 中数据的更改</li></ul><h2 id="六、Vue-watch-的高级用法–监听对象的属性变化"><a href="#六、Vue-watch-的高级用法–监听对象的属性变化" class="headerlink" title="六、Vue watch 的高级用法–监听对象的属性变化"></a>六、Vue watch 的高级用法–监听对象的属性变化</h2><p>1.监听对象需要深度监听</p><pre class=" language-js"><code class="language-js">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>  obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handler</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    deep<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>2.监听对象里面某个属性的变化，可以通过 computed 做中间层实现</p><pre class=" language-js"><code class="language-js">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>  nm <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nm<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  nm <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userinfo<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件间通信</title>
      <link href="2021/042922513.html"/>
      <url>2021/042922513.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-组件间通信的几种方式"><a href="#Vue-组件间通信的几种方式" class="headerlink" title="Vue 组件间通信的几种方式"></a>Vue 组件间通信的几种方式</h1><h2 id="1、props-emit-适用于父子组件通信"><a href="#1、props-emit-适用于父子组件通信" class="headerlink" title="1、props/$emit 适用于父子组件通信"></a>1、props/$emit 适用于父子组件通信</h2><p>父组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>myChild</span> <span class="token attr-name">:msg</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token attr-name">@sendChildData</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getNum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>myChild</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>点击子组件之后拿到子组件中的值：{{ num }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      str<span class="token punctuation">:</span> <span class="token string">"我是父组件中的字符串，传值给子组件"</span><span class="token punctuation">,</span>      num<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">getNum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> data<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// num == 12321</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>子组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sendNum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span><span class="token punctuation">{</span>    msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      num<span class="token punctuation">:</span> <span class="token number">12321</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">sendNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'sendChildData'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="2、ref-与-parent-children-适用于-父子组件通信"><a href="#2、ref-与-parent-children-适用于-父子组件通信" class="headerlink" title="2、ref 与 parent /children 适用于 父子组件通信"></a>2、ref 与 parent /children 适用于 父子组件通信</h2><p>对于 ref 官方的解释是：ref 是被用来给元素或子组件注册引用信息的。引用信息将会注册在父组件的 $refs 对象上。</p><ul><li>如果 ref 用在子组件上，指向的是组件实例，可以理解为对子组件的索引，通过$ref 可能获取到在子组件里定义的属性和方法。</li><li>如果 ref 在普通的 DOM 元素上使用，引用指向的就是 DOM 元素，通过$ref 可能获取到该 DOM 的属性集合，轻松访问到 DOM 元素，作用与 JQ 选择器类似。</li></ul><p>补充一点 prop 和 ref 的区别：</p><ul><li>prop 着重于数据的传递，它并不能调用子组件里的属性和方法。像创建文章组件时，自定义标题和内容这样的使用场景，最适合使用 prop。</li><li>$ref 着重于索引，主要用来调用子组件里的属性和方法，其实并不擅长数据传递。而且 ref 用在 dom 元素的时候，能使到选择器的作用，这个功能比作为索引更常有用到。</li></ul><h2 id="3、Vuex-适用于-父子、隔代、兄弟组件通信"><a href="#3、Vuex-适用于-父子、隔代、兄弟组件通信" class="headerlink" title="3、Vuex 适用于 父子、隔代、兄弟组件通信"></a>3、Vuex 适用于 父子、隔代、兄弟组件通信</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</p><p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。<br>改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 组件传值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组去重</title>
      <link href="2021/042747912.html"/>
      <url>2021/042747912.html</url>
      
        <content type="html"><![CDATA[<h1 id="数组去重方法汇总"><a href="#数组去重方法汇总" class="headerlink" title="数组去重方法汇总"></a>数组去重方法汇总</h1><h2 id="1-set-去重-Es6-新增"><a href="#1-set-去重-Es6-新增" class="headerlink" title="1.set 去重(Es6 新增)"></a>1.set 去重(Es6 新增)</h2><p><em>集合</em>数据结构 集合是由一种没有重复元素且没有顺序的数组，主要用于数组去重，字符串去重。</p><p>ES6 提供的 Set 数据结构类似于数组，且没有重复的值（多用于去重）,它有一大特性就是所有元素都是唯一的，没有重复。<br>因此，我们可以利用这一唯一特性进行数组的去重工作,这种方式代码是最少的，在不考虑性能的情况下，这是最方便的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deduplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时set是一个对象</span>  <span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">set</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里利用扩展运算符展开赋值，生成一个新的数组</span>  <span class="token keyword">return</span> arr1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">deduplicate</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1,2,3,4,5]</span></code></pre><h2 id="2-使用数组-filter-indexOf-方法"><a href="#2-使用数组-filter-indexOf-方法" class="headerlink" title="2.使用数组 filter+indexOf 方法"></a>2.使用数组 filter+indexOf 方法</h2><p>数组的 filter()方法可以过滤出第一次出现的某个值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deduplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> index<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">deduplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre><h2 id="3-数组-sort-结合-for-循环"><a href="#3-数组-sort-结合-for-循环" class="headerlink" title="3.数组 sort 结合 for 循环"></a>3.数组 sort 结合 for 循环</h2><p>把数组进行 sort 排序，然后遍历两者比较，把不相同的放入到一个新的数组里面</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deduplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个空数组</span>  <span class="token comment" spellcheck="true">//利用sort()方法对数组进行排序，如果相同就放在一起</span>  arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//前后比较，不同的话的就放入到一个新的数组里面</span>      arr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">deduplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3,4]</span></code></pre><h2 id="4-forEach-indexOf-去重"><a href="#4-forEach-indexOf-去重" class="headerlink" title="4.forEach+indexOf 去重"></a>4.forEach+indexOf 去重</h2><p>利用数组的 forEach, indexOf 方法，判断数组中是否有这一项，然后放入到一个新的数组里面</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deduplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义一个空数组，来存放重复的值</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//判断空数组中是否有这个值，如果没有，就放到这个数组中</span>      newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">deduplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre><h2 id="5-利用-JavaScript-对象的特点"><a href="#5-利用-JavaScript-对象的特点" class="headerlink" title="5.利用 JavaScript 对象的特点"></a>5.利用 JavaScript 对象的特点</h2><p>利用对象的属性不能重复的特点结合 for 循环实现数组去重（一个键名和一个键值称为是一个属性）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deduplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断对象中是否有这个属性名</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//如果没有的话，赋值为1，例{1:1,2:1,3:1}</span>      obj<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//然后根据索引把这些不重复的值放入新的数组中</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">deduplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre><h2 id="6-数组的-includes-方法"><a href="#6-数组的-includes-方法" class="headerlink" title="6.数组的 includes 方法"></a>6.数组的 includes 方法</h2><p>利用数组的 includes 方法，判断一个数组中是否有某个值，如果没有，就放到一个新的数组里面</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deduplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//空数组用来存放重复的数值</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newArr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//判断新数组中是否包含这个值</span>      newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newArr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回这个新的数组</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">deduplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre><h2 id="7-双重-for-循环比较"><a href="#7-双重-for-循环比较" class="headerlink" title="7.双重 for 循环比较"></a>7.双重 for 循环比较</h2><p>利用循环两两比较，结合数组的 splice 方法，进行截取</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deduplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//自身不用跟自身进行比较，截取的时候会改变数组的长度，所以要进行j--</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        j<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">deduplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数组去重 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>copy</title>
      <link href="2021/042631690.html"/>
      <url>2021/042631690.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-中实现复制粘贴"><a href="#Vue-中实现复制粘贴" class="headerlink" title="Vue 中实现复制粘贴"></a>Vue 中实现复制粘贴</h1><h2 id="HTML-部分代码"><a href="#HTML-部分代码" class="headerlink" title="HTML 部分代码"></a>HTML 部分代码</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>要复制的信息：{{ copyInfo }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>copy(copyInfo)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击复制<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h2 id="js-部分代码"><a href="#js-部分代码" class="headerlink" title="js 部分代码"></a>js 部分代码</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      copyInfo<span class="token punctuation">:</span> <span class="token string">"我是被你复制的信息"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">copy</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> xxInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建一个隐藏input（重要！）</span>      xxInput<span class="token punctuation">.</span>value <span class="token operator">=</span> msg<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//赋值</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>xxInput<span class="token punctuation">)</span><span class="token punctuation">;</span>      xxInput<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选择对象</span>      document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">"Copy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行浏览器的复制命令</span>      xxInput<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"xxInput"</span><span class="token punctuation">;</span>      xxInput<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 隐藏input</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"复制成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>很简单就可以实现了</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js实现复制粘贴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>prototype</title>
      <link href="2021/042318061.html"/>
      <url>2021/042318061.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript————原型与原型链"><a href="#JavaScript————原型与原型链" class="headerlink" title="JavaScript————原型与原型链"></a>JavaScript————原型与原型链</h1><h2 id="一、prototype"><a href="#一、prototype" class="headerlink" title="一、prototype"></a>一、prototype</h2><p>在 JavaScript 中，每个函数都有一个 prototype 属性，这个属性指向函数的原型对象。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"apple"</span><span class="token punctuation">;</span><span class="token keyword">var</span> personA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> personB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>personA<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//apple</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>personB<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//apple</span></code></pre><p>上述例子中，函数的 prototype 指向了一个对象，而这个对象正是调用构造函数时创建的实例的原型，也就是 personA 和 personB 的原型。</p><p>原型的概念：每一个 JavaScript 对象(除 null 外)创建的时候，就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型中“继承”属性。</p><p>下图展示了构造函数和实例原型之间的关系：</p><p><img src="/2021/042318061/prototype.png" alt="构造函数和实例原型之间的关系">;</p><h2 id="二、-proto"><a href="#二、-proto" class="headerlink" title="二、_proto_"></a>二、_proto_</h2><p>这是每个对象(除 null 外)都会有的属性，叫做_proto_，这个属性会指向该对象的原型。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>关系图：</p><p><img src="/2021/042318061/img1.png" alt="关系图">;</p><p>补充说明：</p><p>绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj._proto_ 时，可以理解成返回了 Object.getPrototypeOf(obj)。</p><h2 id="三、constructor"><a href="#三、constructor" class="headerlink" title="三、constructor"></a>三、constructor</h2><p>每个原型都有一个 constructor 属性，指向该关联的构造函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><p>所以更新下关系图：</p><p><img src="/2021/042318061/img2.png" alt="关系图">;</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 顺便学习一个ES5的方法,可以获得对象的原型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>补充说明：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到 constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：</p><pre class=" language-js"><code class="language-js">person<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span></code></pre><h2 id="四、实例与原型"><a href="#四、实例与原型" class="headerlink" title="四、实例与原型"></a>四、实例与原型</h2><p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"apple"</span><span class="token punctuation">;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"banana"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// banana</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>name<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// apple</span></code></pre><p>在这个例子中，我们给实例对象 person 添加了 name 属性，当我们打印 person.name 的时候，结果自然为 banana。</p><p>但是当我们删除了 person 的 name 属性时，读取 person.name，从 person 对象中找不到 name 属性就会从 person 的原型也就是 person._proto_ ，也就是 Person.prototype 中查找，幸运的是我们找到了 name 属性，结果为 apple。</p><p>但是万一还没有找到呢？原型的原型又是什么呢？</p><h2 id="五、原型的原型"><a href="#五、原型的原型" class="headerlink" title="五、原型的原型"></a>五、原型的原型</h2><p>在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"apple"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// apple</span></code></pre><p>其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 _proto_ 指向构造函数的 prototype ，所以我们再更新下关系图：</p><p><img src="/2021/042318061/img3.png" alt="关系图">;</p><h2 id="六、原型链"><a href="#六、原型链" class="headerlink" title="六、原型链"></a>六、原型链</h2><p>简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript 高级程序设计》</p><p>其实简单来说，就是上述四-五的过程。</p><p>继上述五中所说，那 Object.prototype 的原型呢？</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>引用阮一峰老师的 《undefined 与 null 的区别》 就是：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">null</span> 表示“没有对象”，即该处不应该有值。</code></pre><p>所以 Object.prototype._proto_ 的值为 null 跟 Object.prototype 没有原型，其实表达了一个意思。</p><p>所以查找属性的时候查到 Object.prototype 就可以停止查找了。</p><p>最后一张关系图也可以更新为：</p><p><img src="/2021/042318061/img4.png" alt="关系图">;</p><p>图中由相互关联的原型组成的链状结构就是<em>原型链</em>，也就是蓝色的这条线。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型与原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="2021/03227415.html"/>
      <url>2021/03227415.html</url>
      
        <content type="html"><![CDATA[<p>闭包（closure）是 JavasSript 的一大难点，也是它的特色。很多高级应用都要依靠闭包来实现。</p><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ul><li><p>要理解闭包，首先要理解 JavasSript 的特殊的变量作用域。</p></li><li><p>变量的作用域无非就两种：<strong>全局变量和局部变量</strong>。</p></li><li><p>JavasSript 语言的特别之处就在于：函数内部可以直接读取全局变量，但是在函数外部无法读取函数内部的局部变量。</p></li><li><p>注意点：<em>在函数内部声明变量的时候，一定要使用 var 命令。如果不用的话，你实际上声明的是一个全局变量！</em></p></li></ul><h2 id="如何从外部读取函数内部的局部变量？"><a href="#如何从外部读取函数内部的局部变量？" class="headerlink" title="如何从外部读取函数内部的局部变量？"></a>如何从外部读取函数内部的局部变量？</h2><ul><li><p>出于种种原因，我们有时候需要获取到函数内部的局部变量。但是，上面已经说过了，正常情况下，这是办不到的！只有通过变通的方法才能实现。</p></li><li><p>那就是在函数内部，再定义一个函数。</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>在上面的代码中，函数 func2 就被包括在函数 func1 内部，这时 func1 内部的所有局部变量，对 func2 都是可见的。但是反过来就不行，f2 内部的局部变量，对 func1 就是不可见的。</p></li><li><p>这就是 JavasSript 语言特有的”链式作用域”结构（chain scope），</p></li><li><p>子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p></li><li><p>既然 func2 可以读取 func1 中的局部变量，那么只要把 func2 作为返回值，我们不就可以在 func1 外部读取它的内部变量了吗！</p></li></ul><h2 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h2><ul><li><p>上面代码中的 func2 函数，就是闭包。</p></li><li><p>各种专业文献的闭包定义都非常抽象，我的理解是: <strong>闭包就是能够读取其他函数内部变量的函数。</strong></p></li><li><p>由于在 JavasSript 中，只有函数内部的子函数才能读取局部变量，所以说，闭包可以简单理解成”定义在一个函数内部的函数”。</p></li><li><p>所以，在本质上，<em>闭包是将函数内部和函数外部连接起来的桥梁。</em></p></li></ul><h2 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h2><ul><li><p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，<em>在退出函数之前，将不使用的局部变量全部删除</em>。</p></li><li><p>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bind-background</title>
      <link href="2021/03222423.html"/>
      <url>2021/03222423.html</url>
      
        <content type="html"><![CDATA[<h2 id="vue-行内样式绑定-background-使用变量"><a href="#vue-行内样式绑定-background-使用变量" class="headerlink" title="vue 行内样式绑定 background 使用变量"></a>vue 行内样式绑定 background 使用变量</h2><p>前两天在开发项目时遇到的问题，切换主题样式时，根据主题变量切换不同的背景图片，根据<em>变量绑定不同类名</em>这种方法可以实现，但是需要在 css 中写很多种类名，维护起来不方便，所以想到把 background 绑定在行内样式，使用变量切换图片。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token string">'url('</span> + url + <span class="token string">') no-repeat center'</span> <span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      url<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 切换主题时动态变换的图片地址</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'theme'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'activeName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`@/assets/image/theme/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>activeName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/oval.png`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 监听主题变化，赋值新的背景图片</span>    <span class="token function">activeName</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`@/assets/image/theme/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>newVal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/oval.png`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>var-let-const</title>
      <link href="2021/032258734.html"/>
      <url>2021/032258734.html</url>
      
        <content type="html"><![CDATA[<h2 id="var、let、const-的区别"><a href="#var、let、const-的区别" class="headerlink" title="var、let、const 的区别"></a>var、let、const 的区别</h2><p><em>随着 ES6 的到来，var 已经不再是单一的定义变量的方法。</em></p><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><p>一、首先用 var 定义变量有这样的 bug：</p><ul><li>js 没有块级作用域，在 js 函数中用 var 定义变量，其作用域是整个函数体的全部。<br>我们在 for 循环的外面可以拿到 for 循环里面定义的变量。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><span id="more"></span><ul><li>循环内变量过度共享<br>下面的 for 循环，输出结果是三个 3，循环本身和三次 timeout 的回调均共享唯一的变量 i，当循环结束执行的时候，i 的值为 3。所以当第一个 timeout 执行时，调用的 i 值为 3，所以输出了三个 3。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>二、let，超级好用的！</p><ul><li><strong>使用 let 声明的变量拥有块级作用域。</strong>使用 let 声明的变量的作用域只是外层块，并不是整个外层函数。let 声明仍保留了提升特性，但不会盲目提升，在用 var 定义变量的例子一中，我们采用 let 替代 var 来定义变量，这样我们在 for 循环外面就拿不到 let 定义的变量。</li><li><strong>使用 let 声明的全局变量不是全局对象的属性。</strong>我们用 let 定义的变量是不能通过 window.变量名的方式来访问这些变量，它们存在于一个不可见的块级作用域中。</li><li><strong>形如 for(let i…)的循环在每次迭代的时候都会为 i 创建新的绑定。</strong>就像 var 中的第二个例子，如果一个循环执行多次，并且循环都保持了一个闭包，那么每个闭包将会拿到循环变量的不同值，而不是像 var 定义的变量那样，所有闭包都拿到循环变量的同一个值。</li></ul><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>三、cosnt，声明常量！</p><ul><li>const 是用来声明定义常量的，在 ES6 中，const 声明的常量类似于指针，它指向某个引用，也就是说这个常量并非一成不变的，比如：</li></ul><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token keyword">const</span> ARR <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//var ARR = [5,6]</span>  ARR<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ARR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [5,6,7]</span>  ARR <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError   若用var定义变量，则ARR可以赋值</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ARR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>我们用 const 定义的数组，是可以操作数组在数组里面添加数据的，但是我们不能给这个变量重新赋值，const <strong>不能只声明不赋值，const 在使用时，请使用大写变量</strong>！</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> var、let、const </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
